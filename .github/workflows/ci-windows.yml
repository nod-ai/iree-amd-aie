name: CI Windows

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      force_debug_with_tmate:
        type: boolean
        description: 'Run the build with tmate session'
        required: false
        default: false
      debug_with_tmate:
        type: boolean
        description: 'Run the build with a tmate session ONLY in case of failure'
        required: false
        default: false
      force_ccache:
        type: boolean
        description: 'Force save ccache'
        required: false
        default: false
  pull_request:
  merge_group:
  push:
    branches:
      - main

concurrency:
  group: ci-build-test-cpp-windows-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  build_and_ctest:
    name: Build and Test (windows, ASSERTIONS)
    runs-on: windows-2019
    strategy:
      fail-fast: true
    env:
      CACHE_DIR: ${{ github.workspace }}/.container-cache
      CACHE_KEY: windows-build-test-cpp-asserts-v1-${{ format('{0}-{1}', github.ref_name, github.run_number) }}
    defaults:
      run:
        shell: powershell
    steps:
      - name: Set unified TZ
        uses: szenius/set-timezone@v2.0
        with:
          # this is an arbitrary choice
          timezoneLinux: "Asia/Singapore"
          timezoneMacos: "Asia/Singapore"
          timezoneWindows: "Singapore Standard Time"
          
      - name: "Checking out repository"
        env:
          BRANCH_NAME: ${{ github.ref }}
          REPO_ADDRESS: ${{ github.server_url }}/${{ github.repository }}
        shell: bash
        run: |
          git init
          git remote add origin $REPO_ADDRESS
          git -c protocol.version=2 fetch --depth 1 origin $BRANCH_NAME
          git reset --hard FETCH_HEAD
          git -c submodule."third_party/torch-mlir".update=none -c submodule."third_party/stablehlo".update=none -c submodule."src/runtime_src/core/common/aiebu".update=none submodule update --init --recursive --depth 1 --single-branch -j 10

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm
          vcvarsall: true
          cmake: true
          ninja: true
          ccache: true

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Python deps
        run: |
          pip install "numpy<2" pyyaml "pybind11[global]==2.10.3" nanobind

      - name: Enable cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ env.CACHE_KEY }}
          restore-keys: windows-build-test-cpp-

      - name: Build packages
        run: |
          $env:cache_dir = "${{ env.CACHE_DIR }}"
          $env:CCACHE_COMPILERCHECK = "string:$(clang-cl.exe --version)"
          .\build_tools\build_llvm.ps1
          ls
          # Remove-Item -Path "$pwd\llvm-build" -Force
          $env:llvm_install_dir = "$pwd\llvm-install"
          echo $env:llvm_install_dir
          .\build_tools.\build_test_cpp.ps1

      - name: Create artifacts
        if: ${{ !cancelled() }}
        run: |
          pushd third_party/iree/third_party/llvm-project 
          $llvm_sha_short = "$(git rev-parse --short HEAD)"
          popd
          tar cf llvm-dist-windows-$llvm_sha_short.tar llvm-install
          tar cf iree-dist-windows.tar iree-install

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: windows_x86_64_llvm_packages
          path: llvm-dist-*.tar
          if-no-files-found: warn

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: windows_x86_64_iree_packages
          path: iree-dist-windows.tar
          if-no-files-found: warn

      - name: Save cache
        uses: actions/cache/save@v3
        if: ${{ !cancelled() && (inputs.force_ccache || github.event_name == 'push' && github.ref_name == 'main') }}
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ env.CACHE_KEY }}

      - name: Start tmate session
        if: ${{ (failure() && inputs.debug_with_tmate) || inputs.force_debug_with_tmate }}
        uses: mxschmitt/action-tmate@v3.18
        with:
          limit-access-to-actor: true

  test_windows:
    name: E2E Test windows
    runs-on: windows-phoenix
    needs: build_and_ctest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: true
    steps:
      - name: "Checking out repository" # for test scripts
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
        with:
          submodules: false # not required for testbench

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows_x86_64_iree_packages

      - name: Extract artifact
        run: |
          tar -xvf iree-dist-windows.tar
          bash build_tools/download_peano.sh 

      - name: Create venv and install dependencies
        run: |
          python -m venv .venv
          source .venv/Scripts/activate
          pip install -r tests/matmul/requirements.txt

      - name: E2E correctness matmul test
        run: |
          source .venv/Scripts/activate
          export XILINX_XRT=/c/Xilinx/XRT
          bash build_tools/ci/run_matmul_test.sh \
            /c/test_matmuls \
            $PWD/iree-install \
            $PWD/llvm-aie

      - name : E2E comparison of AIE to llvm-cpu
        run: |
          source .venv/Scripts/activate
          export XILINX_XRT=/c/Xilinx/XRT
          python build_tools/ci/cpu_comparison/run.py \
            /c/test_aie_vs_cpu \
            $PWD/iree-install \
            $PWD/llvm-aie -v

      - name: Printing IR from aie2xclbin
        run: |
          source .venv/Scripts/activate
          export XILINX_XRT=/c/Xilinx/XRT
          bash build_tools/ci/print_ir_aie2xclbin/print_ir_aie2xclbin.sh \
            $PWD/iree-install \
            /c/print_ir_aie2xclbin_results \
            $PWD/llvm-aie
