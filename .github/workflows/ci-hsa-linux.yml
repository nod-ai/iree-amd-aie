name: CI Linux HSA

on:
  workflow_call:
  workflow_dispatch:
  pull_request:
  merge_group:
  push:
    branches:
      - main

concurrency:
  group: ci-build-test-cpp-linux-hsa-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  build_llvm:
    name: Build LLVM
    runs-on: nod-ai-shared-cpubuilder-manylinux-x86_64
    env:
      CACHE_DIR: ${{ github.workspace }}/.container-cache
      CACHE_KEY: linux-build-test-cpp-asserts-manylinux-v2-${{ format('{0}-{1}', github.ref_name, github.run_number) }}
    steps:
      - name: Set unified TZ
        uses: szenius/set-timezone@v2.0
        with:
          # this is an arbitrary choice
          timezoneLinux: "Asia/Singapore"
          timezoneMacos: "Asia/Singapore"
          timezoneWindows: "Singapore Standard Time"

      - name: Configure local git mirrors
        run: |
          /gitmirror/scripts/trigger_update_mirrors.sh
          /gitmirror/scripts/git_config.sh

      - name: "Checking out repository"
        env:
          BRANCH_NAME: ${{ github.ref }}
          REPO_ADDRESS: ${{ github.server_url }}/${{ github.repository }}
        run: |
          git init
          git remote add origin $REPO_ADDRESS
          git -c protocol.version=2 fetch --depth 1 origin $BRANCH_NAME
          git reset --hard FETCH_HEAD
          git -c submodule."third_party/googletest".update=none \
              -c submodule."third_party/vulkan_headers".update=none \
              -c submodule."third_party/pybind11".update=none \
              -c submodule."third_party/benchmark".update=none \
              -c submodule."third_party/tracy".update=none \
              -c submodule."third_party/flatcc".update=none \
              -c submodule."third_party/spirv_cross".update=none \
              -c submodule."third_party/cpuinfo".update=none \
              -c submodule."third_party/webgpu-headers".update=none \
              -c submodule."third_party/musl".update=none \
              -c submodule."third_party/stablehlo".update=none \
              -c submodule."third_party/torch-mlir".update=none \
              -c submodule."third_party/hip-build-deps".update=none \
              submodule update --init --recursive --depth 1 --single-branch -j 10 third_party/iree

      - name: Python deps
        run: |
          pip install "numpy<2" pyyaml "pybind11[global]==2.10.3" nanobind pytest

      - name: Enable cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key:  ${{ env.CACHE_KEY }}
          restore-keys: linux-build-test-cpp-

      - name: Build packages
        run: |
          export cache_dir="${{ env.CACHE_DIR }}"
          export CCACHE_COMPILERCHECK="string:$(clang --version)"
          bash build_tools/build_llvm.sh
          rm -rf llvm-build

      - name: Create artifacts
        if: ${{ !cancelled() }}
        run: |
          pushd third_party/iree/third_party/llvm-project && llvm_sha_short=$(git rev-parse --short HEAD) && popd
          tar cf llvm-dist-linux-$llvm_sha_short.tar llvm-install

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: linux_x86_64_llvm_packages
          path: llvm-dist-*.tar
          if-no-files-found: warn

      - name: Save cache
        uses: actions/cache/save@v3
        if: ${{ !cancelled() && github.event_name == 'push' && github.ref_name == 'main' }}
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ env.CACHE_KEY }}

  build_hsa:
    name: Build HSA (linux)
    needs: [build_llvm]
    runs-on: nod-ai-shared-cpubuilder-manylinux-x86_64
    env:
      CACHE_DIR: ${{ github.workspace }}/.container-cache
      CACHE_KEY: linux-build-test-cpp-asserts-manylinux-v2-${{ format('{0}-{1}', github.ref_name, github.run_number) }}
    steps:
      - name: Configure local git mirrors
        run: |
          /gitmirror/scripts/trigger_update_mirrors.sh
          /gitmirror/scripts/git_config.sh

      - name: "Checking out repository"
        env:
          BRANCH_NAME: ${{ github.ref }}
          REPO_ADDRESS: ${{ github.server_url }}/${{ github.repository }}
        run: |
          git init
          git remote add origin $REPO_ADDRESS
          git -c protocol.version=2 fetch --depth 1 origin $BRANCH_NAME
          git reset --hard FETCH_HEAD
          git submodule update --init --recursive --depth 1 --single-branch -j 10 third_party/ROCR-Runtime

      - name: Install deps
        run: |
          dnf install -y almalinux-release-devel
          yum install -y elfutils-libelf-devel p7zip p7zip-plugins \
                         ncurses-compat-libs openssh vim-common

      - name: Build and install libnuma
        working-directory: ${{ github.workspace }}/third_party/ROCR-Runtime
        run: |
          curl --silent -L \
            https://github.com/numactl/numactl/releases/download/v2.0.18/numactl-2.0.18.tar.gz \
            -o numactl-2.0.18.tar.gz
          tar -xf numactl-2.0.18.tar.gz
          pushd numactl-2.0.18
          ./configure
          # i have no idea why this is necessary
          # but without it you get something about "can't cd into dir"
          sed -i '7563s/`cd "$dir" && pwd`/$dir/g' libtool
          make install
          popd

      - name: Hack ROCR
        working-directory: ${{ github.workspace }}/third_party/ROCR-Runtime
        run: |
          sed -i 's/amdgcn-amd-amdhsa/amdgcn-amd-amdhsa -nogpulib/g' runtime/hsa-runtime/core/runtime/blit_shaders/CMakeLists.txt
          sed -i 's/amdgcn-amd-amdhsa/amdgcn-amd-amdhsa -nogpulib/g' runtime/hsa-runtime/core/runtime/trap_handler/CMakeLists.txt
          sed -i 's/amdgcn-amd-amdhsa/amdgcn-amd-amdhsa -nogpulib/g' runtime/hsa-runtime/image/blit_src/CMakeLists.txt
          sed -i 's/static const/const/g' runtime/hsa-runtime/core/inc/amd_gpu_agent.h

      - name: Download LLVM artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux_x86_64_llvm_packages

      - name: Get compatible Clang
        run: |
          tar xf llvm-dist-*.tar
          echo "llvm_install_dir=$PWD/llvm-install" >> $GITHUB_ENV

      - name: Build ROCR distro
        working-directory: ${{ github.workspace }}/third_party/ROCR-Runtime
        run: |
          rocr_dir="$PWD"
          build_rocr_dir="$PWD/rocr-build"
          mkdir -p "$build_rocr_dir"
          build_rocr_dir="$(cd $build_rocr_dir && pwd)"
          rocr_install_dir="$PWD/rocr-install"
          
          cmake -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_LIBDIR=lib \
            -DCMAKE_INSTALL_PREFIX="$rocr_install_dir" \
            -DClang_DIR=$llvm_install_dir/lib/cmake/clang \
            -DLLVM_DIR=$llvm_install_dir/cmake/llvm \
            -DIMAGE_SUPPORT=OFF \
            -S "$rocr_dir" -B "$build_rocr_dir"
          
          cmake --build "$build_rocr_dir" --target install
          tar -cf rocr-${GITHUB_SHA::8}.tar rocr-install

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: linux_hsa_x86_64_release_packages
          path: ${{ github.workspace }}/third_party/ROCR-Runtime/rocr-*.tar
          if-no-files-found: error

  build_and_ctest:
    name: Build and Test with HSA (linux, ASSERTIONS)
    needs: [build_llvm, build_hsa]
    runs-on: nod-ai-shared-cpubuilder-manylinux-x86_64
    strategy:
      fail-fast: false
      matrix:
        IREE_AIE_HSA_RUNTIME_DIRECT_LINK: [false]
    env:
      CACHE_DIR: ${{ github.workspace }}/.container-cache
      # either the PR number or `branch-N` where N always increments
      CACHE_KEY: linux-build-test-cpp-asserts-manylinux-v2-${{ format('{0}-{1}', github.ref_name, github.run_number) }}
    steps:
      - name: Set unified TZ
        uses: szenius/set-timezone@v2.0
        with:
          # this is an arbitrary choice
          timezoneLinux: "Asia/Singapore"
          timezoneMacos: "Asia/Singapore"
          timezoneWindows: "Singapore Standard Time"

      - name: Configure local git mirrors
        run: |
          /gitmirror/scripts/trigger_update_mirrors.sh
          /gitmirror/scripts/git_config.sh

      - name: "Checking out repository"
        env:
          BRANCH_NAME: ${{ github.ref }}
          REPO_ADDRESS: ${{ github.server_url }}/${{ github.repository }}
        run: |
          git init
          git remote add origin $REPO_ADDRESS
          git -c protocol.version=2 fetch --depth 1 origin $BRANCH_NAME
          git reset --hard FETCH_HEAD
          git -c submodule."third_party/torch-mlir".update=none \
              -c submodule."third_party/stablehlo".update=none \
              -c submodule."third_party/llvm-project".update=none \
              -c submodule."src/runtime_src/core/common/aiebu".update=none \
              submodule update --init --recursive --depth 1 --single-branch -j 10

      - name: Install deps
        run: |
          dnf install -y almalinux-release-devel epel-release
          yum remove -y openssl-devel zlib-devel || true
          yum install -y protobuf-devel protobuf-compiler tmate \
                         elfutils-libelf-devel p7zip p7zip-plugins \
                         ncurses-compat-libs openssh

      - name: Python deps
        run: |
          pip install "numpy<2" pyyaml "pybind11[global]==2.10.3" nanobind

      - name: Enable cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.CACHE_DIR }}
          key:  ${{ env.CACHE_KEY }}
          restore-keys: linux-build-test-cpp-

      - name: Download LLVM artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux_x86_64_llvm_packages

      - name: Extract LLVM artifact
        run: |
          tar xf llvm-dist-*.tar
          echo "llvm_install_dir=$PWD/llvm-install" >> $GITHUB_ENV
          bash build_tools/download_peano.sh
          echo "PEANO_INSTALL_DIR=$PWD/llvm-aie" >> $GITHUB_ENV

      - name: Download HSA artifacts
        if: ${{ matrix.IREE_AIE_HSA_RUNTIME_DIRECT_LINK }}
        uses: actions/download-artifact@v4
        with:
          name: linux_hsa_x86_64_release_packages

      - name: Extract HSA artifact
        if: ${{ matrix.IREE_AIE_HSA_RUNTIME_DIRECT_LINK }}
        run: |
          tar -xvf rocr-*.tar
          echo "hsa_runtime64_DIR=$PWD/rocr-install/lib/cmake/hsa-runtime64" >> $GITHUB_ENV
          echo "hsakmt_DIR=$PWD/rocr-install/lib/cmake/hsakmt" >> $GITHUB_ENV

      - name: Build packages
        run: |
          export cache_dir="${{ env.CACHE_DIR }}"
          export CCACHE_COMPILERCHECK="string:$(clang --version)"
          export IREE_EXTERNAL_HAL_DRIVERS=amd-aie-hsa
          export IREE_AIE_HSA_RUNTIME_DIRECT_LINK=${{ matrix.IREE_AIE_HSA_RUNTIME_DIRECT_LINK && 'ON' || 'OFF' }}
          export hsa_runtime64_DIR="$hsa_runtime64_DIR"
          export hsakmt_DIR="$hsakmt_DIR"
          export llvm_install_dir="$llvm_install_dir"
          bash build_tools/build_test_cpp.sh

      - name: Copy cts tests
        run: |
          mkdir -p iree-install/device_tests
          cp iree-build/runtime/plugins/AMD-AIE/iree-amd-aie/driver/hsa/cts/*test iree-install/device_tests

      - name: Create artifacts
        if: ${{ !cancelled() }}
        run: |
          tar cf iree-dist-linux.tar iree-install

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: linux_x86_64_release_packages${{ matrix.IREE_AIE_HSA_RUNTIME_DIRECT_LINK && '-hsa-direct-link' || '' }}
          path: iree-dist-linux.tar
          if-no-files-found: warn

      - name: Save cache
        uses: actions/cache/save@v3
        if: ${{ !cancelled() && github.event_name == 'push' && github.ref_name == 'main' }}
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ env.CACHE_KEY }}

  test_linux:
    name: E2E Test linux with HSA
    needs: [build_llvm, build_hsa, build_and_ctest]
    runs-on: linux-phoenix
    strategy:
      fail-fast: false
      matrix:
        IREE_AIE_HSA_RUNTIME_DIRECT_LINK: [false]
    env:
      XILINXD_LICENSE_FILE: /opt/xilinx/Xilinx.lic
    steps:
      - name: "Checking out repository"
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
        with:
          submodules: false

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Extract artifact
        run: |
          tar -xvf iree-dist-linux.tar
          tar -xvf rocr-*.tar
          echo "LD_LIBRARY_PATH=$PWD/rocr-install/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Create venv and install dependencies
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -r tests/matmul/requirements.txt
          bash build_tools/download_peano.sh

      - name : HSA CTS tests
        run: |
          pushd iree-install/device_tests
          for test in $(ls *test); do ./$test; done
          popd

      - name : E2E comparison of AIE to llvm-cpu
        run: |
          source .venv/bin/activate
          source /opt/xilinx/xrt/setup.sh
          python3 build_tools/ci/cpu_comparison/run.py \
            test_aie_vs_cpu \
            $PWD/iree-install \
            $PWD/llvm-aie \
            --target-backend amd-aie-hsa \
            --vitis-dir /opt/Xilinx/Vitis/2024.2 \
            --reset-npu-between-runs -v

      - name: E2E correctness matmul test
        run: |
          source .venv/bin/activate
          export TARGET_BACKEND=amd-aie-hsa
          bash build_tools/ci/run_matmul_test.sh \
            test_matmuls \
            iree-install \
            $PWD/llvm-aie \
            /opt/Xilinx/Vitis/2024.2

      - name: Printing IR from aie2xclbin
        run: |
          source .venv/bin/activate
          export TARGET_BACKEND=amd-aie-hsa
          bash build_tools/ci/print_ir_aie2xclbin/print_ir_aie2xclbin.sh \
            iree-install \
            print_ir_aie2xclbin_results \
            $PWD/llvm-aie
