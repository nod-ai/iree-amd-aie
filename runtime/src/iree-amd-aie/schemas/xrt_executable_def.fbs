// Copyright 2023 The IREE Authors
//
// Licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

namespace iree.amd.aie.hal.xrt;

// 'XRT Executable'.
file_identifier "XRTR";
file_extension "xrtr";

// Source code location denoted by a file name and line within that file.
table FileLineLocDef {
  filename:string;
  line:int32;
}

// Assembly instructions.
table AsmInstDef {
  asm_inst:[uint32];
}

table ExecutableDef {
  // A map of entry point ordinals to string names as used by XRT
  entry_points:[string];

  // xclbin container format (also known as AXLF) is defined in file xclbin.h. 
  // The file uses xclbin2 as the magic word. AXLF is sections based extensible container.
  // Different sections store different parts of compiled application like bitstreams for PL (FPGA fabric),
  // ELF for AIE tiles and embedded processors like Microblaze. 
  // It also contains well structured metadata to define memory topology, 
  // IP layout of instantiated peripherals and compute kernels, 
  // clocking details and kernel connectivity for each compute kernel.

  // The compiler generates unique xclbin file tagged with UUID for every application compiled. 
  // Each xclbin also has another UUID which defines its compatbility to the Shell. 
  // Vitis compiler, v++ generates this file as part of linking stage. 
  // End-users load this file via XRT xclLoadXclbin() API. 
  // XRT userspace and kernel space components consume different sections of xclbin by 
  // programming the hardware and initializing key data structures in XRT userspace libraries and XRT kernel drivers.
  
  // XCLBIN string of the module.
  xclbin:string;

  // Assembly instructions stream for LX6 processor to run for each kernel
  // The number of kernels and by extention the number of asm instruction streams
  // are equal to the number of entry points. We access each kernel
  // by giving the entry point name to the xclbin and getting a kernel object from it.
  asm_instrs:[AsmInstDef];

  source_locations:[FileLineLocDef];
}

root_type ExecutableDef;
