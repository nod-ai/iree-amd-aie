// Copyright 2023 The IREE Authors
//
// Licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

namespace iree.amd.aie.hal.xrt;

// 'XRT Executable'.
file_identifier "XRTR";
file_extension "xrtr";

// Source code location denoted by a file name and line within that file.
table FileLineLocDef {
  filename:string;
  line:int32;
}

// XCLBINs.
table XclbinDef {
  xclbin:string;
}

// Represents a 1D array of uint32 values.
table UI32Array1dDef {
  data:[uint32];
}

// Represents a 2D array of uint32 values.
table UI32Array2dDef {
  arrays:[UI32Array1dDef];
}

table ExecutableDef {
  // A map of entry point ordinals to string names as used in XCLBIN(s)
  entry_points:[string];

  // xclbin container format (also known as AXLF) is defined in file xclbin.h.
  // The file uses xclbin2 as the magic word. AXLF is sections based extensible container.
  // Different sections store different parts of compiled application like bitstreams for PL (FPGA fabric),
  // ELF for AIE tiles and embedded processors like Microblaze.
  // It also contains well structured metadata to define memory topology,
  // IP layout of instantiated peripherals and compute kernels,
  // clocking details and kernel connectivity for each compute kernel.

  // The compiler generates unique xclbin file tagged with UUID for every application compiled.
  // Each xclbin also has another UUID which defines its compatbility to the Shell.
  // Vitis compiler, v++ generates this file as part of linking stage.
  // End-users load this file via XRT xclLoadXclbin() API.
  // XRT userspace and kernel space components consume different sections of xclbin by
  // programming the hardware and initializing key data structures in XRT userspace libraries and XRT kernel drivers.

  // A map of entry point ordinals to the indices of the containing XCLBINs (the following field).
  // This list has the same size as the entry_points list.
  // This list currently is just a range (0, number of entry points] but will change when we start doing
  // kernel merging in the backend.
  xclbin_indices:[uint32];


  // XCLBIN strings of the entry points.
  xclbins: [XclbinDef];

  // A map of entry point ordinals to the indices of the containing `asm_instr_runlists` (the following field).
  // This list has the same size as the `entry_points` list.
  asm_instr_runlist_indices:[uint32];

  // Assembly instructions for the LX6 processor to execute.
  // This is a 3D uint32 array:
  //   - The first dimension corresponds to different entry points (same size as `entry_points`).
  //   - The second dimension represents the number of kernel runs per entry point.
  //     Its size is either 1 (for a standard run) or `2 * num_reconfiguration` (if reconfiguration is required).
  //     In the case of reconfiguration:
  //       - Each reconfiguration consists of two kernel runs:
  //         - One for the configuration.
  //         - One for the actual execution after reconfiguration.
  //   - The third dimension is a uint32 array containing the instruction stream for a single kernel run.
  asm_instr_runlists:[UI32Array2dDef];

  // A map of entry point ordinals to the indices of the containing `reconf_data_runlists` (the following field).
  // This list has the same size as the `entry_points` list.
  // - The type is `int32` instead of `uint32` to allow `-1` as a special value.
  // - If an index is `-1`, it indicates that no reconfiguration is required for the corresponding entry point.
  //   This is a workaround, as `reconf_data_runlists` does not support null elements.
  reconf_data_runlist_indices:[int32];

  // Device reconfiguration data.
  // This forms a 3D uint32 array:
  //   - The first dimension corresponds to entry points that require reconfiguration.
  //     - Its size is smaller than `entry_points` because not all entry points require reconfiguration.
  //     - Null elements are not supported in flatbuffer, so only entries with reconfiguration are included.
  //   - The second dimension represents the number of reconfiguration sequences per entry point.
  //   - The third dimension contains a uint32 array with control packet data required for a single reconfiguration.
  reconf_data_runlists: [UI32Array2dDef];

  source_locations:[FileLineLocDef];
}

root_type ExecutableDef;
